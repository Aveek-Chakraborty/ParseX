'use client'
import React, { useState } from 'react';
import { chatSession } from '@/utils/GeminiAIModel';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';

interface OptimizedPythonBytecodeProps {
    pythonCode: string;
    bytecode: string;
}

const OptimizedPythonBytecode: React.FC<OptimizedPythonBytecodeProps> = ({ pythonCode, bytecode }) => {
    const [loading, setLoading] = useState(false);
    const [optimizedBytecode, setOptimizedBytecode] = useState('');
    const [open, setOpen] = useState(false);

    const generateOptimizedBytecode = async () => {
        setLoading(true);
        const inputPrompt =  `Optimize the following Python bytecode to reduce redundant operations, improve execution efficiency, and follow best practices\nPython Code:\n${pythonCode}\n\nBytecode:\n${bytecode}\n\nReturn the optimized bytecode strictly in the following JSON format without any additional text or code blocks:\n\n{
          "optimized_bytecode": "Optimized Python bytecode here."
        }\n\nEnsure that the generated bytecode accurately represents the execution of the provided Python script. If the code is simple, return the direct bytecode output. If the code is complex, provide a structured breakdown of the bytecode and a high-level understanding of its functionality. If the bytecode is extremely long and difficult to parse within the constraints of this format, then provide a vague description of how the bytecode would look like in a structured manner such that it atleast represents a bytecode.The response must always adhere strictly to this JSON format, ensuring no additional text or formatting issues. If the input code contains errors, mention them explicitly in the optimized bytecode section itself.`;
        try {
            const result = await chatSession.sendMessage(inputPrompt);
            const rawResponse = result.response.text();
            const cleanResponse = rawResponse.replace('```json', '').replace('```', '');
            const parsedResponse = JSON.parse(cleanResponse);
            setOptimizedBytecode(parsedResponse.optimized_bytecode);
        } catch (error) {
            console.error('Error processing request:', error);
            setOptimizedBytecode('Error generating optimized bytecode.');
        } finally {
            setLoading(false);
        }
    };

    return (
        <div>
            <div className="flex flex-col p-10 border m-5 rounded-lg">
                <h1 className="text-xl font-bold mb-2">Optimized Python Bytecode Generation</h1>
                <p>Python bytecode can be optimized to reduce redundant operations, improve execution efficiency, and adhere to best practices, ensuring faster performance and reduced memory usage.</p>
                <Button onClick={() => setOpen(true)} className="mt-3">
                    Open Optimizer
                </Button>
            </div>

            <Dialog open={open} onOpenChange={setOpen}>
                <DialogContent className="max-w-screen-2xl w-[90vw] h-[90vh] flex flex-col p-6">
                    <DialogHeader>
                        <DialogTitle className="p-4">Optimized Bytecode Generation</DialogTitle>
                    </DialogHeader>
                    <div className="bg-gray-800 p-4 rounded-lg shadow-inner text-gray-300 text-sm overflow-auto max-h-60 border border-gray-700">
                        <pre>{pythonCode}</pre>
                    </div>
                    
                    <Button 
                        onClick={generateOptimizedBytecode} 
                        className="w-full mt-4 bg-blue-600 hover:bg-blue-700 transition-colors py-2 rounded-lg" 
                        disabled={loading}
                    >
                        {loading ? 'Generating...' : 'Optimize Bytecode'}
                    </Button>
                    {optimizedBytecode && (
                        <div className="mt-4">
                            <h2 className="text-lg font-semibold">Optimized Python Bytecode:</h2>
                            <div className="bg-gray-800 p-4 rounded-lg shadow-inner text-green-400 text-sm min-h-80 max-h-96 overflow-y-auto border border-gray-700">
                                <pre className="whitespace-pre-wrap break-words">{optimizedBytecode}</pre>
                            </div>
                        </div>
                    )}
                </DialogContent>
            </Dialog>
        </div>
    );
};

export default OptimizedPythonBytecode;
