'use client'
import React, { useState } from 'react';
import { chatSession } from '@/utils/GeminiAIModel';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';

interface PythonToBytecodeProps {
    pythonCode: string;
    setB: React.Dispatch<React.SetStateAction<string>>
}

const PythonToBytecode: React.FC<PythonToBytecodeProps> = ({ pythonCode , setB}) => {
    const [loading, setLoading] = useState(false);
    const [bytecode, setBytecode] = useState('');
    const [open, setOpen] = useState(false);

    const generateBytecode = async () => {
        setLoading(true);
        const inputPrompt =  `Compile the following Python code into its corresponding bytecode:
        \nPython Code:\n${pythonCode}\n\nEnsure that the generated bytecode accurately represents the execution of the provided Python script. If the code is simple, return the direct bytecode output. If the code is complex, provide a structured breakdown of the bytecode and a high-level understanding of its functionality. If the bytecode is extremely long and difficult to parse within the constraints of this format, then provide a vague description of how the bytecode would look like in a structured manner such that it atleast represents a bytecode. Provide mw with only code and its explanations.
        MAke a detailed High level bytecode for difficult codes.
        Return the output strictly in the following JSON format without any additional text or code blocks:\n\n{
          "bytecode": "Generated Python bytecode here."
        }\n\nThe response must always adhere strictly to this JSON format, ensuring no additional text or formatting issues. If the input code contains errors, mention them explicitly in the bytecode section itself.`;
        try {
            const result = await chatSession.sendMessage(inputPrompt);
            const rawResponse = result.response.text();
            const cleanResponse = rawResponse.replace('```json', '').replace('```', '');
            const parsedResponse = JSON.parse(cleanResponse);
            console.log(cleanResponse)
            setBytecode(parsedResponse.bytecode);
            setB(bytecode)
        } catch (error) {
            console.error('Error processing request:', error);
            setBytecode('Error generating bytecode.');
            setB('Error generating bytecode.')
        } finally {
            setLoading(false);
        }
    };

    return (
        <div>
            <div className="flex flex-col p-10 border m-5 rounded-lg">
                <h1 className="text-xl font-bold mb-2">Bytecode Generation</h1>
                <p >Python bytecode is a low-level, platform-independent representation of Python source code, executed by the Python virtual machine (PVM). It serves as an intermediate step in Python execution, ensuring optimized performance and portability.</p>
                <Button onClick={() => setOpen(true)} className="mt-3">
                    Open Converter
                </Button>
            </div>

            <Dialog open={open} onOpenChange={setOpen}>
                <DialogContent className="max-w-screen-2xl w-[90vw] h-[90vh] flex flex-col p-6">
                    <DialogHeader>
                        <DialogTitle className="p-4">Python Bytecode Generation</DialogTitle>
                    </DialogHeader>
                    <div className="bg-gray-800 p-4 rounded-lg shadow-inner text-gray-300 text-sm overflow-auto max-h-60 border border-gray-700">
                        <pre>{pythonCode}</pre>
                    </div>
                    <Button 
                        onClick={generateBytecode} 
                        className="w-full mt-4 bg-blue-600 hover:bg-blue-700 transition-colors py-2 rounded-lg" 
                        disabled={loading}
                    >
                        {loading ? 'Generating...' : 'Convert to Bytecode'}
                    </Button>
                    {bytecode && (
                        <div className="mt-4">
                            <h2 className="text-lg font-semibold">Generated Python Bytecode:</h2>
                            <div className="bg-gray-800 p-4 rounded-lg shadow-inner text-green-400 text-sm min-h-80 max-h-96 overflow-y-auto border border-gray-700">
                                <pre className="whitespace-pre-wrap break-words">{bytecode}</pre>
                            </div>
                        </div>
                    )}
                </DialogContent>
            </Dialog>
        </div>
    );
};

export default PythonToBytecode;
